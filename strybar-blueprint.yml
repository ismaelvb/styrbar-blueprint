blueprint:
  name: IKEA Styrbar Zigbee2MQTT - Dispositivo automático
  description: >
    Controla luzes com o comando IKEA Styrbar via Zigbee2MQTT.
    Seleciona o dispositivo (não a entidade), e o blueprint reage automaticamente à entidade *_action.
    Alterna entre luzes, ajusta brilho e tonalidade, com persistência via input_select.
  domain: automation
  input:
    styrbar_device:
      name: Dispositivo IKEA Styrbar (MQTT)
      selector:
        device:
          integration: mqtt

    light_entities:
      name: Luzes a controlar
      selector:
        entity:
          domain: light
          multiple: true

    active_light_select:
      name: Input Select com a luz ativa
      selector:
        entity:
          domain: input_select

    brightness_step:
      name: Passo de brilho (%)
      default: 10
      selector:
        number:
          min: 1
          max: 50

    color_temp_step:
      name: Passo de temperatura (mireds)
      default: 25
      selector:
        number:
          min: 5
          max: 100

mode: restart

variables:
  lights: !input light_entities
  brightness_step: !input brightness_step
  color_temp_step: !input color_temp_step
  select_entity: !input active_light_select
  light_names: "{{ lights | map('replace', 'light.', '') | list }}"
  styrbar_device_id: !input styrbar_device

trigger:
  - platform: state
    entity_id:
      - sensor.styrbar_action  # substitui pelo nome correto se for diferente

condition:
  - condition: template
    value_template: >
      {{ device_id(trigger.entity_id) == styrbar_device_id }}

action:
  - variables:
      action: "{{ trigger.to_state.state }}"
      current_option: "{{ states(select_entity) }}"
      idx: "{{ light_names.index(current_option) }}"
      total: "{{ light_names | length }}"
      active_light: "{{ 'light.' ~ current_option }}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ action == 'arrow_right_click' }}"
        sequence:
          - variables:
              new_idx: "{{ (idx + 1) % total }}"
              new_light: "{{ light_names[new_idx] }}"
          - service: input_select.select_option
            data:
              entity_id: "{{ select_entity }}"
              option: "{{ new_light }}"
          - service: light.turn_on
            data:
              entity_id: "{{ 'light.' ~ new_light }}"
              flash: short

      - conditions:
          - condition: template
            value_template: "{{ action == 'arrow_left_click' }}"
        sequence:
          - variables:
              new_idx: "{{ (idx - 1) % total }}"
              new_light: "{{ light_names[new_idx] }}"
          - service: input_select.select_option
            data:
              entity_id: "{{ select_entity }}"
              option: "{{ new_light }}"
          - service: light.turn_on
            data:
              entity_id: "{{ 'light.' ~ new_light }}"
              flash: short

      - conditions:
          - condition: template
            value_template: "{{ action in ['brightness_up_click', 'brightness_down_click'] }}"
        sequence:
          - service: light.toggle
            data:
              entity_id: "{{ active_light }}"

      - conditions:
          - condition: template
            value_template: "{{ action in ['brightness_up_hold', 'brightness_down_hold'] }}"
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ active_light }}"
              brightness_step_pct: >-
                {% if action == 'brightness_up_hold' %}
                  {{ brightness_step }}
                {% else %}
                  {{ -1 * brightness_step }}
                {% endif %}

      - conditions:
          - condition: template
            value_template: "{{ action in ['arrow_right_hold', 'arrow_left_hold'] }}"
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ active_light }}"
              color_temp_step: >-
                {% if action == 'arrow_right_hold' %}
                  {{ color_temp_step }}
                {% else %}
                  {{ -1 * color_temp_step }}
                {% endif %}
